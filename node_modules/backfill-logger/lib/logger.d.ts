/// <reference types="node" />
import { Readable } from "stream";
import { LogLevel } from "./logLevel";
import { ConsoleLogger, LoggerOverrides } from "./consoleLogger";
export { isCorrectLogLevel, LogLevel } from "./logLevel";
declare type Times = "hashTime" | "buildTime" | "putTime" | "fetchTime";
export declare type Logger = ConsoleLogger & {
    setName(name: string): void;
    setHash(hash: string): void;
    setCacheProvider(cacheProvider: string): void;
    setHit(hit: boolean): void;
    setTime(type: Times): {
        stop(): void;
    };
    setMode(mode: string, logLevel: "verbose" | "info"): void;
    setHashOfOutput(hash: string): void;
    toFile(logFolder: string): Promise<void>;
    pipeProcessOutput(stdout: Readable | null, stderr: Readable | null): void;
};
export declare function makeLogger(logLevel: LogLevel, overrides?: LoggerOverrides): Logger;
//# sourceMappingURL=logger.d.ts.map