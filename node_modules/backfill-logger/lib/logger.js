"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeLogger = exports.isCorrectLogLevel = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const filenamify_1 = __importDefault(require("filenamify"));
const chalk_1 = __importDefault(require("chalk"));
const timer_1 = require("./timer");
const consoleLogger_1 = require("./consoleLogger");
var logLevel_1 = require("./logLevel");
Object.defineProperty(exports, "isCorrectLogLevel", { enumerable: true, get: function () { return logLevel_1.isCorrectLogLevel; } });
function createFileName(performanceReportData) {
    return filenamify_1.default(`perf-${performanceReportData.name}-${performanceReportData.timestamp}.json`);
}
function makeLogger(logLevel, overrides) {
    const consoleLogger = consoleLogger_1.makeConsoleLogger(logLevel, overrides);
    const timer = timer_1.defaultTimer;
    const performanceReportData = {
        timestamp: Date.now(),
    };
    return {
        pipeProcessOutput(stdout, stderr) {
            stdout &&
                stdout.on("data", (chunk) => consoleLogger.consoleOverride.info(chunk.toString()));
            stderr &&
                stderr.on("data", (chunk) => consoleLogger.consoleOverride.error(chunk.toString()));
        },
        silly: consoleLogger.silly,
        verbose: consoleLogger.verbose,
        info: consoleLogger.info,
        warn: consoleLogger.warn,
        error: consoleLogger.error,
        setName(name) {
            consoleLogger.info(`Package name: ${name}`);
            performanceReportData["name"] = name;
        },
        setHash(hash) {
            consoleLogger.verbose(`Package hash: ${hash}`);
            performanceReportData["hash"] = hash;
        },
        setCacheProvider(cacheProvider) {
            consoleLogger.verbose(`Cache provider: ${cacheProvider}`);
            performanceReportData["cacheProvider"] = cacheProvider;
        },
        setHit(hit) {
            consoleLogger.info(hit ? `Cache hit!` : `Cache miss!`);
            performanceReportData["hit"] = hit;
        },
        setTime(type) {
            const tracer = timer.start();
            return {
                stop: () => {
                    const time = tracer.stop();
                    consoleLogger.verbose(`Profiling ${chalk_1.default.underline(type)} took ${chalk_1.default.cyanBright(`${time} ms`)}`);
                    performanceReportData[type] = time;
                },
            };
        },
        setMode(mode, logLevel) {
            consoleLogger[logLevel](`Running in ${mode} mode.`);
            performanceReportData["mode"] = mode;
        },
        setHashOfOutput(hash) {
            consoleLogger.verbose(`Hash of output: ${hash}`);
            performanceReportData["hashOfOutput"] = hash;
        },
        async toFile(logFolder) {
            const filepath = path_1.default.join(logFolder, createFileName(performanceReportData));
            await fs_extra_1.default.outputJson(filepath, performanceReportData, { spaces: 2 });
            consoleLogger.silly(`Performance log created at ${filepath}`);
        },
    };
}
exports.makeLogger = makeLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnREFBd0I7QUFFeEIsd0RBQTBCO0FBQzFCLDREQUFvQztBQUNwQyxrREFBMEI7QUFHMUIsbUNBQThDO0FBQzlDLG1EQUl5QjtBQUN6Qix1Q0FBeUQ7QUFBaEQsNkdBQUEsaUJBQWlCLE9BQUE7QUFrQjFCLFNBQVMsY0FBYyxDQUFDLHFCQUE0QztJQUNsRSxPQUFPLG9CQUFVLENBQ2YsUUFBUSxxQkFBcUIsQ0FBQyxJQUFJLElBQUkscUJBQXFCLENBQUMsU0FBUyxPQUFPLENBQzdFLENBQUM7QUFDSixDQUFDO0FBY0QsU0FBZ0IsVUFBVSxDQUN4QixRQUFrQixFQUNsQixTQUEyQjtJQUUzQixNQUFNLGFBQWEsR0FBRyxpQ0FBaUIsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDN0QsTUFBTSxLQUFLLEdBQVUsb0JBQVksQ0FBQztJQUNsQyxNQUFNLHFCQUFxQixHQUEwQjtRQUNuRCxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtLQUN0QixDQUFDO0lBRUYsT0FBTztRQUNMLGlCQUFpQixDQUFDLE1BQXVCLEVBQUUsTUFBdUI7WUFDaEUsTUFBTTtnQkFDSixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQzFCLGFBQWEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUNyRCxDQUFDO1lBQ0osTUFBTTtnQkFDSixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQzFCLGFBQWEsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUN0RCxDQUFDO1FBQ04sQ0FBQztRQUNELEtBQUssRUFBRSxhQUFhLENBQUMs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