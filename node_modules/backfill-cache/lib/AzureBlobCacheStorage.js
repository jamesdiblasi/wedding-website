"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureBlobCacheStorage = void 0;
const path = __importStar(require("path"));
const stream_1 = require("stream");
const storage_blob_1 = require("@azure/storage-blob");
const tar_fs_1 = __importDefault(require("tar-fs"));
const fs_extra_1 = require("fs-extra");
const CacheStorage_1 = require("./CacheStorage");
const ONE_MEGABYTE = 1024 * 1024;
const FOUR_MEGABYTES = 4 * ONE_MEGABYTE;
/*
 * Timeout stream, will emit an error event if the
 * input has not started providing data after a given time after
 * its creation.
 */
class TimeoutStream extends stream_1.Transform {
    constructor(timeout, message) {
        super();
        this.timeout = setTimeout(() => {
            this.destroy(new Error(message));
        }, timeout);
    }
    _transform(chunk, _encoding, callback) {
        clearTimeout(this.timeout);
        this.push(chunk);
        callback();
    }
}
/*
 * Sponge stream, it will accumulate all the data it receives
 * and emit it only if and when the input stream sends the "end" event.
 */
class SpongeStream extends stream_1.Transform {
    constructor() {
        super({
            // This stream should never receive more data than its readableHighWaterMark
            // otherwise the stream will get into a deadlock
            // 1 TB should give enough room :)
            readableHighWaterMark: 1024 * 1024 * 1024 * 1024,
        });
    }
    _transform(chunk, _encoding, callback) {
        this.pause();
        this.push(chunk);
        callback();
    }
    _flush(callback) {
        this.resume();
        callback();
    }
}
const uploadOptions = {
    bufferSize: FOUR_MEGABYTES,
    maxBuffers: 5,
};
function createBlobClient(connectionString, containerName, blobName) {
    const blobServiceClient = storage_blob_1.BlobServiceClient.fromConnectionString(connectionString);
    const containerClient = blobServiceClient.getContainerClient(containerName);
    const blobClient = containerClient.getBlobClient(blobName);
    return blobClient;
}
class AzureBlobCacheStorage extends CacheStorage_1.CacheStorage {
    constructor(options, logger, cwd, incrementalCaching = false) {
        super(logger, cwd, incrementalCaching);
        this.options = options;
    }
    async _fetch(hash) {
        try {
            const blobClient = createBlobClient(this.options.connectionString, this.options.container, hash);
            // If a maxSize has been specified, make sure to check the properties for the size before transferring
            if (this.options.maxSize) {
                const sizeResponse = await blobClient.getProperties();
                if (sizeResponse.contentLength &&
                    sizeResponse.contentLength > this.options.maxSize) {
                    this.logger.verbose(`A blob is too large to be downloaded: ${hash}, size: ${sizeResponse.contentLength} bytes`);
                    return false;
                }
            }
            const response = await blobClient.download(0);
            const blobReadableStream = response.readableStreamBody;
            if (!blobReadableStream) {
                throw new Error("Unable to fetch blob.");
            }
            const tarWritableStream = tar_fs_1.default.extract(this.cwd);
            const spongeStream = new SpongeStream();
            const timeoutStream = new TimeoutStream(10 * 60 * 1000, `The fetch request to ${hash} seems to be hanging`);
            const extractionPipeline = new Promise((resolve, reject) => stream_1.pipeline(blobReadableStream, spongeStream, timeoutStream, tarWritableStream, (err) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            }));
            await extractionPipeline;
            return true;
        }
        catch (error) {
            if (error && error.statusCode === 404) {
                return false;
            }
            else {
                throw error;
            }
        }
    }
    async _put(hash, filesToCache) {
        const blobClient = createBlobClient(this.options.connectionString, this.options.container, hash);
        const blockBlobClient = blobClient.getBlockBlobClient();
        const tarStream = tar_fs_1.default.pack(this.cwd, { entries: filesToCache });
        // If there's a maxSize limit, first sum up the total size of bytes of all the outputGlobbed files
        if (this.options.maxSize) {
            let total = 0;
            for (const file of filesToCache) {
                total = total + (await fs_extra_1.stat(path.join(this.cwd, file))).size;
            }
            if (total > this.options.maxSize) {
                this.logger.verbose(`The output is too large to be uploaded: ${hash}, size: ${total} bytes`);
                return;
            }
        }
        await blockBlobClient.uploadStream(tarStream, uploadOptions.bufferSize, uploadOptions.maxBuffers);
    }
}
exports.AzureBlobCacheStorage = AzureBlobCacheStorage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXp1cmVCbG9iQ2FjaGVTdG9yYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0F6dXJlQmxvYkNhY2hlU3RvcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQTZCO0FBQzdCLG1DQUFnRTtBQUNoRSxzREFBd0Q7QUFDeEQsb0RBQTJCO0FBSzNCLHVDQUFnQztBQUNoQyxpREFBOEM7QUFFOUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNqQyxNQUFNLGNBQWMsR0FBRyxDQUFDLEdBQUcsWUFBWSxDQUFDO0FBRXhDOzs7O0dBSUc7QUFDSCxNQUFNLGFBQWMsU0FBUSxrQkFBUztJQUVuQyxZQUFZLE9BQWUsRUFBRSxPQUFlO1FBQzFDLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNuQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDZCxDQUFDO0lBQ0QsVUFBVSxDQUNSLEtBQVUsRUFDVixTQUF5QixFQUN6QixRQUEyQjtRQUUzQixZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakIsUUFBUSxFQUFFLENBQUM7SUFDYixDQUFDO0NBQ0Y7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLFlBQWEsU0FBUSxrQkFBUztJQUNsQztRQUNFLEtBQUssQ0FBQztZQUNKLDRFQUE0RTtZQUM1RSxnREFBZ0Q7WUFDaEQsa0NBQWtDO1lBQ2xDLHFCQUFxQixFQUFFLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUk7U0FDakQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNELFVBQVUsQ0FD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