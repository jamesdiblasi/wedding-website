"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCacheStorageProvider = exports.isCustomProvider = exports.CacheStorage = void 0;
const AzureBlobCacheStorage_1 = require("./AzureBlobCacheStorage");
const LocalCacheStorage_1 = require("./LocalCacheStorage");
const NpmCacheStorage_1 = require("./NpmCacheStorage");
const LocalSkipCacheStorage_1 = require("./LocalSkipCacheStorage");
var CacheStorage_1 = require("./CacheStorage");
Object.defineProperty(exports, "CacheStorage", { enumerable: true, get: function () { return CacheStorage_1.CacheStorage; } });
function isCustomProvider(config) {
    return typeof config.provider === "function";
}
exports.isCustomProvider = isCustomProvider;
const memo = new Map();
function getCacheStorageProvider(cacheStorageConfig, internalCacheFolder, logger, cwd, incrementalCaching = false) {
    let cacheStorage;
    if (isCustomProvider(cacheStorageConfig)) {
        try {
            return cacheStorageConfig.provider(logger, cwd);
        }
        catch {
            throw new Error("cacheStorageConfig.provider cannot be creaated");
        }
    }
    const key = `${cacheStorageConfig.provider}${internalCacheFolder}${cwd}`;
    cacheStorage = memo.get(key);
    if (cacheStorage) {
        return cacheStorage;
    }
    if (cacheStorageConfig.provider === "npm") {
        cacheStorage = new NpmCacheStorage_1.NpmCacheStorage(cacheStorageConfig.options, internalCacheFolder, logger, cwd, incrementalCaching);
    }
    else if (cacheStorageConfig.provider === "azure-blob") {
        cacheStorage = new AzureBlobCacheStorage_1.AzureBlobCacheStorage(cacheStorageConfig.options, logger, cwd, incrementalCaching);
    }
    else if (cacheStorageConfig.provider === "local-skip") {
        cacheStorage = new LocalSkipCacheStorage_1.LocalSkipCacheStorage(internalCacheFolder, logger, cwd, incrementalCaching);
    }
    else {
        cacheStorage = new LocalCacheStorage_1.LocalCacheStorage(internalCacheFolder, logger, cwd, incrementalCaching);
    }
    memo.set(key, cacheStorage);
    return cacheStorage;
}
exports.getCacheStorageProvider = getCacheStorageProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBSUEsbUVBQWdFO0FBQ2hFLDJEQUF3RDtBQUN4RCx1REFBb0Q7QUFDcEQsbUVBQWdFO0FBQ2hFLCtDQUE2RDtBQUFyQyw0R0FBQSxZQUFZLE9BQUE7QUFFcEMsU0FBZ0IsZ0JBQWdCLENBQzlCLE1BQTBCO0lBRTFCLE9BQU8sT0FBTyxNQUFNLENBQUMsUUFBUSxLQUFLLFVBQVUsQ0FBQztBQUMvQyxDQUFDO0FBSkQsNENBSUM7QUFFRCxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBeUIsQ0FBQztBQUU5QyxTQUFnQix1QkFBdUIsQ0FDckMsa0JBQXNDLEVBQ3RDLG1CQUEyQixFQUMzQixNQUFjLEVBQ2QsR0FBVyxFQUNYLGtCQUFrQixHQUFHLEtBQUs7SUFFMUIsSUFBSSxZQUF1QyxDQUFDO0lBRTVDLElBQUksZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsRUFBRTtRQUN4QyxJQUFJO1lBQ0YsT0FBTyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2pEO1FBQUMsTUFBTTtZQUNOLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQztTQUNuRTtLQUNGO0lBRUQsTUFBTSxHQUFHLEdBQUcsR0FBRyxrQkFBa0IsQ0FBQyxRQUFRLEdBQUcsbUJBQW1CLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDekUsWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsSUFBSSxZQUFZLEVBQUU7UUFDaEIsT0FBTyxZQUFZLENBQUM7S0FDckI7SUFFRCxJQUFJLGtCQUFrQixDQUFDLFFBQVEsS0FBSyxLQUFLLEVBQUU7UUFDekMsWUFBWSxHQUFHLElBQUksaUNBQWUsQ0FDaEMsa0JBQWtCLENBQUMsT0FBTyxFQUMxQixtQkFBbUIsRUFDbkIsTUFBTSxFQUNOLEdBQUcsRUFDSCxrQkFBa0IsQ0FDbkIsQ0FBQztLQUNIO1NBQU0sSUFBSSxrQkFBa0IsQ0FBQyxRQUFRLEtBQUssWUFBWSxFQUFFO1FBQ3ZELFlBQVksR0FBRyxJQUFJLDZDQUFxQixDQUN0QyxrQkFBa0IsQ0FBQyxPQUFPLEVBQzFCLE1BQU0sRUFDTixHQUFHLEVBQ0gsa0JBQWtCLENBQ25CLENBQUM7S0FDSDtTQUFNLElBQUksa0JBQWtCLENBQUMsUUFBUSxLQUFLLFlBQVksRUFBRTtRQUN2RCxZQUFZLEdBQUcsSUFBSSw2Q0FBcUIsQ0FDdEMsbUJBQW1CLEVBQ25CLE1BQU0sRUFDTixHQUFHLEVBQ0gsa0JBQWtCLENBQ25CLENBQUM7S0FDSDtTQUFNO1FBQ0wsWUFBWSxHQUFHLElBQUkscUNBQWlCLENBQ2xDLG1CQUFtQixFQUNuQixNQUFNLEVBQ04sR0FBRyxFQUNILGtCQUFrQixDQUNuQixDQUFDO0tBQ0g7SUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUU1QixPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDO0FBeERELDBEQXdEQyJ9