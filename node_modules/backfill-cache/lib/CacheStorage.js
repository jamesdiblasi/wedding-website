"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheStorage = void 0;
const globby_1 = __importDefault(require("globby"));
const hashFile_1 = require("./hashFile");
// First key is the hash, second key is the file relative path
const savedHashes = new Map();
// contract: cwd should be absolute
// The return keys are relative path with posix file separators
async function getHashesFor(cwd) {
    const result = new Map();
    const allFiles = await globby_1.default(["**/*", "!node_modules"], { cwd });
    //globby returns relative path with posix file separator
    await Promise.all(allFiles.map(async (f) => {
        const hash = await hashFile_1.getFileHash(cwd, f);
        result.set(f, hash);
    }));
    return result;
}
class CacheStorage {
    constructor(logger, cwd, incrementalCaching = false) {
        this.logger = logger;
        this.cwd = cwd;
        this.incrementalCaching = incrementalCaching;
    }
    async fetch(hash) {
        const tracer = this.logger.setTime("fetchTime");
        const result = await this._fetch(hash);
        tracer.stop();
        this.logger.setHit(result);
        if (!result && this.incrementalCaching) {
            savedHashes.set(hash, await getHashesFor(this.cwd));
        }
        return result;
    }
    async put(hash, outputGlob) {
        const tracer = this.logger.setTime("putTime");
        const filesMatchingOutputGlob = await globby_1.default(outputGlob, { cwd: this.cwd });
        let filesToCache = filesMatchingOutputGlob;
        if (this.incrementalCaching) {
            // Get the list of files that have not changed so we don't need to cache them.
            const hashesNow = await getHashesFor(this.cwd);
            const hashesThen = (await savedHashes.get(hash)) || new Map();
            const unchangedFiles = [...hashesThen.keys()].filter((s) => hashesThen.get(s) === hashesNow.get(s));
            filesToCache = filesMatchingOutputGlob.filter((f) => !unchangedFiles.includes(f));
        }
        await this._put(hash, filesToCache);
        tracer.stop();
    }
}
exports.CacheStorage = CacheStorage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FjaGVTdG9yYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0NhY2hlU3RvcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxvREFBNEI7QUFJNUIseUNBQXlDO0FBRXpDLDhEQUE4RDtBQUM5RCxNQUFNLFdBQVcsR0FBcUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUVoRSxtQ0FBbUM7QUFDbkMsK0RBQStEO0FBQy9ELEtBQUssVUFBVSxZQUFZLENBQUMsR0FBVztJQUNyQyxNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBa0IsQ0FBQztJQUV6QyxNQUFNLFFBQVEsR0FBRyxNQUFNLGdCQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLHdEQUF3RDtJQUN4RCxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2YsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdkIsTUFBTSxJQUFJLEdBQUcsTUFBTSxzQkFBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBRUYsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUlELE1BQXNCLFlBQVk7SUFDaEMsWUFDWSxNQUFjLEVBQ2QsR0FBVyxFQUNiLHFCQUFxQixLQUFLO1FBRnhCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQ2IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFRO0lBQ2pDLENBQUM7SUFDRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQVk7UUFDN0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFaEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXZDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVkLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTNCLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQ3RDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ3JEO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBWSxFQUFFLFVBQW9CO1FBQ2pELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTlDLE1BQU0sdUJBQXVCLEdBQUcsTUFBTSxnQkFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUU1RSxJQUFJLFlBQVksR0FBRyx1QkFBdUIsQ0FBQztRQUMzQyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUMzQiw4RUFBOEU7WUFDOUUsTUFBTSxTQUFTLEdBQUcsTUFBTSxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQy9DLE1BQU0sVUFBVSxHQUNkLENBQUMsTUFBTSxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxHQUFHLEVBQWtCLENBQUM7WUFDN0QsTUFBTSxjQUFjLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FDbEQsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FDOUMsQ0FBQztZQUNGLFlBQVksR0FBRyx1QkFBdUIsQ0FBQyxNQUFNLENBQzNDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQ25DLENBQUM7U0FDSDtRQUVELE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7Q0FLRjtBQWhERCxvQ0FnREMifQ==