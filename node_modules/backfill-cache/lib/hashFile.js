"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFileHash = void 0;
const path = __importStar(require("path"));
const fs_1 = require("fs");
const crypto = __importStar(require("crypto"));
const p_limit_1 = __importDefault(require("p-limit"));
let MAX_FILE_OPERATIONS = 5000;
try {
    const maxFileOpEnv = process.env["BACKFILL_MAX_FILE_OP"];
    if (maxFileOpEnv) {
        MAX_FILE_OPERATIONS = parseInt(maxFileOpEnv);
    }
}
catch (_) {
    /* The env variable is not an integer, this is fine.*/
}
const diskLimit = p_limit_1.default(MAX_FILE_OPERATIONS);
// The first key is the file path, the second key is mtime
const memo = new Map();
async function computeHash(filePath) {
    const fileBuffer = await diskLimit(() => {
        return fs_1.promises.readFile(filePath);
    });
    // We use sha1 for perf reason and because the hashing is not used for security reason.
    const hashSum = crypto.createHash("sha1");
    hashSum.update(fileBuffer);
    const hash = hashSum.digest("hex");
    return hash;
}
/*
 * Get the hash of a file.
 * This function memoizes the hash for files and mtimes.
 */
async function getFileHash(cwd, filePath) {
    const fileAbsPath = path.join(cwd, filePath);
    const stat = await fs_1.promises.stat(fileAbsPath);
    let memoForFile = memo.get(fileAbsPath);
    if (!memoForFile) {
        memoForFile = new Map();
        memo.set(fileAbsPath, memoForFile);
    }
    let hash = memoForFile.get(stat.mtimeMs);
    if (!hash) {
        hash = await computeHash(fileAbsPath);
        memoForFile.set(stat.mtimeMs, hash);
    }
    return hash;
}
exports.getFileHash = getFileHash;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaEZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaGFzaEZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUE2QjtBQUM3QiwyQkFBb0M7QUFDcEMsK0NBQWlDO0FBQ2pDLHNEQUE2QjtBQUU3QixJQUFJLG1CQUFtQixHQUFHLElBQUksQ0FBQztBQUUvQixJQUFJO0lBQ0YsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3pELElBQUksWUFBWSxFQUFFO1FBQ2hCLG1CQUFtQixHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUM5QztDQUNGO0FBQUMsT0FBTyxDQUFDLEVBQUU7SUFDVixzREFBc0Q7Q0FDdkQ7QUFFRCxNQUFNLFNBQVMsR0FBRyxpQkFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFFOUMsMERBQTBEO0FBQzFELE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxFQUErQixDQUFDO0FBRXBELEtBQUssVUFBVSxXQUFXLENBQUMsUUFBZ0I7SUFDekMsTUFBTSxVQUFVLEdBQUcsTUFBTSxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ3RDLE9BQU8sYUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztJQUNILHVGQUF1RjtJQUN2RixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0IsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRDs7O0dBR0c7QUFDSSxLQUFLLFVBQVUsV0FBVyxDQUMvQixHQUFXLEVBQ1gsUUFBZ0I7SUFFaEIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDN0MsTUFBTSxJQUFJLEdBQUcsTUFBTSxhQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRXhDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEMsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUNoQixXQUFXLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7UUFDeEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7S0FDcEM7SUFFRCxJQUFJLElBQUksR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6QyxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1QsSUFBSSxHQUFHLE1BQU0sV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNyQztJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQW5CRCxrQ0FtQkMifQ==