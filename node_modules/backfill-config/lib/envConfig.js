"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnvConfig = void 0;
const backfill_logger_1 = require("backfill-logger");
const cacheConfig_1 = require("./cacheConfig");
const index_1 = require("./index");
function getEnvConfig(logger) {
    const config = {};
    const cacheProvider = process.env["BACKFILL_CACHE_PROVIDER"];
    const serializedCacheProviderOptions = process.env["BACKFILL_CACHE_PROVIDER_OPTIONS"];
    if (cacheProvider === "azure-blob" && serializedCacheProviderOptions) {
        config["cacheStorageConfig"] = cacheConfig_1.getAzureBlobConfigFromSerializedOptions(serializedCacheProviderOptions, logger);
    }
    else if (cacheProvider === "npm" && serializedCacheProviderOptions) {
        config["cacheStorageConfig"] = cacheConfig_1.getNpmConfigFromSerializedOptions(serializedCacheProviderOptions, logger);
    }
    else if (cacheProvider === "local") {
        // local cache has no config at the moment
    }
    const internalCacheFolder = process.env["BACKFILL_INTERNAL_CACHE_FOLDER"];
    if (internalCacheFolder) {
        config["internalCacheFolder"] = internalCacheFolder;
    }
    const logFolder = process.env["BACKFILL_LOG_FOLDER"];
    if (logFolder) {
        config["logFolder"] = logFolder;
    }
    const mode = process.env["BACKFILL_MODE"];
    if (mode) {
        if (index_1.isCorrectMode(mode)) {
            config["mode"] = mode;
        }
        else {
            throw `Backfill config option "BACKFILL_MODE" was set, but with the wrong value: "${mode}".`;
        }
    }
    const logLevel = process.env["BACKFILL_LOG_LEVEL"];
    if (logLevel) {
        if (backfill_logger_1.isCorrectLogLevel(logLevel)) {
            config["logLevel"] = logLevel;
        }
        else {
            throw `Backfill config option "BACKFILL_LOG_LEVEL" was set, but with the wrong value: "${logLevel}".`;
        }
    }
    const performanceReportName = process.env["BACKFILL_PERFORMANCE_REPORT_NAME"];
    if (performanceReportName) {
        config["performanceReportName"] = performanceReportName;
    }
    const producePerformanceLogs = process.env["BACKFILL_PRODUCE_PERFORMANCE_LOGS"];
    if (producePerformanceLogs) {
        config["producePerformanceLogs"] = Boolean(producePerformanceLogs === "true");
    }
    const validateOutput = process.env["BACKFILL_VALIDATE_OUTPUT"];
    if (validateOutput) {
        config["validateOutput"] = Boolean(validateOutput === "true");
    }
    const incrementalCaching = process.env["BACKFILL_INCREMENTAL_CACHING"];
    if (incrementalCaching) {
        config["incrementalCaching"] = Boolean(incrementalCaching === "true");
    }
    return config;
}
exports.getEnvConfig = getEnvConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52Q29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2VudkNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxREFBNEQ7QUFFNUQsK0NBR3VCO0FBQ3ZCLG1DQUFnRDtBQUVoRCxTQUFnQixZQUFZLENBQUMsTUFBYztJQUN6QyxNQUFNLE1BQU0sR0FBb0IsRUFBRSxDQUFDO0lBRW5DLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUM3RCxNQUFNLDhCQUE4QixHQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7SUFFakQsSUFBSSxhQUFhLEtBQUssWUFBWSxJQUFJLDhCQUE4QixFQUFFO1FBQ3BFLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLHFEQUF1QyxDQUNwRSw4QkFBOEIsRUFDOUIsTUFBTSxDQUNQLENBQUM7S0FDSDtTQUFNLElBQUksYUFBYSxLQUFLLEtBQUssSUFBSSw4QkFBOEIsRUFBRTtRQUNwRSxNQUFNLENBQUMsb0JBQW9CLENBQUMsR0FBRywrQ0FBaUMsQ0FDOUQsOEJBQThCLEVBQzlCLE1BQU0sQ0FDUCxDQUFDO0tBQ0g7U0FBTSxJQUFJLGFBQWEsS0FBSyxPQUFPLEVBQUU7UUFDcEMsMENBQTBDO0tBQzNDO0lBRUQsTUFBTSxtQkFBbUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDMUUsSUFBSSxtQkFBbUIsRUFBRTtRQUN2QixNQUFNLENBQUMscUJBQXFCLENBQUMsR0FBRyxtQkFBbUIsQ0FBQztLQUNyRDtJQUVELE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUNyRCxJQUFJLFNBQVMsRUFBRTtRQUNiLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxTQUFTLENBQUM7S0FDakM7SUFFRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzFDLElBQUksSUFBSSxFQUFFO1FBQ1IsSUFBSSxxQkFBYSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDdkI7YUFBTTtZQUNMLE1BQU0sOEVBQThFLElBQUksSUFBSSxDQUFDO1NBQzlGO0tBQ0Y7SUFFRCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDbkQsSUFBSSxRQUFRLEVBQUU7UUFDWixJQUFJLG1DQUFpQixDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQy9CLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxRQUFRLENBQUM7U0FDL0I7YUFBTTtZQUNMLE1BQU0sbUZBQW1GLFFBQVEsSUFBSSxDQUFDO1NBQ3ZHO0tBQ0Y7SUFFRCxNQUFNLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsQ0FBQztJQUM5RSxJQUFJLHFCQUFxQixFQUFFO1FBQ3pCLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLHFCQUFxQixDQUFDO0tBQ3pEO0lBRUQsTUFBTSxzQkFBc0IsR0FDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0lBQ25ELElBQUksc0JBQXNCLEVBQUU7UUFDMUIsTUFBTSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsT0FBTyxDQUN4QyxzQkFBc0IsS0FBSyxNQUFNLENBQ2xDLENBQUM7S0FDSDtJQUVELE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUMvRCxJQUFJLGNBQWMsRUFBRTtRQUNsQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxPQUFPLENBQUMsY0FBYyxLQUFLLE1BQU0sQ0FBQyxDQUFDO0tBQy9EO0lBRUQsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixDQUFDLENBQUM7SUFDdkUsSUFBSSxrQkFBa0IsRUFBRTtRQUN0QixNQUFNLENBQUMsb0JBQW9CLENBQUMsR0FBRyxPQUFPLENBQUMsa0JBQWtCLEtBQUssTUFBTSxDQUFDLENBQUM7S0FDdkU7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBekVELG9DQXlFQyJ9