import { Logger } from "backfill-logger";
export interface ICacheStorage {
    fetch: (hash: string) => Promise<boolean>;
    put: (hash: string, filesToCache: string[]) => Promise<void>;
}
export declare type AzureBlobCacheStorageOptions = {
    connectionString: string;
    container: string;
    maxSize?: number;
};
export declare type NpmCacheStorageOptions = {
    npmPackageName: string;
    registryUrl: string;
    npmrcUserconfig?: string;
};
export declare type AzureBlobCacheStorageConfig = {
    provider: "azure-blob";
    options: AzureBlobCacheStorageOptions;
};
export declare type NpmCacheStorageConfig = {
    provider: "npm";
    options: NpmCacheStorageOptions;
};
export declare type CustomStorageConfig = {
    provider: (logger: Logger, cwd: string) => ICacheStorage;
    name?: string;
};
export declare type CacheStorageConfig = {
    provider: "local";
} | {
    provider: "local-skip";
} | NpmCacheStorageConfig | AzureBlobCacheStorageConfig | CustomStorageConfig;
export declare function getNpmConfigFromSerializedOptions(options: string, logger: Logger): NpmCacheStorageConfig;
export declare function getAzureBlobConfigFromSerializedOptions(options: string, logger: Logger): AzureBlobCacheStorageConfig;
//# sourceMappingURL=cacheConfig.d.ts.map