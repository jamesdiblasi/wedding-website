"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdoReporter = void 0;
const taskId_1 = require("../../task/taskId");
class AdoReporter {
    log(entry) { }
    summarize(context) {
        var _a;
        const { measures, targets } = context;
        if (measures.failedTargets && measures.failedTargets.length > 0) {
            const failedPackages = [];
            for (const failedTargetId of measures.failedTargets) {
                const { packageName, task } = (0, taskId_1.getPackageAndTask)(failedTargetId);
                const taskLogs = (_a = targets.get(failedTargetId)) === null || _a === void 0 ? void 0 : _a.logger.getLogs();
                let packageLogs = ``;
                if (taskLogs) {
                    packageLogs += `[${packageName} ${task}]`;
                    for (let i = 0; i < taskLogs.length; i += 1) {
                        packageLogs += taskLogs[i].msg.replace("\n", "");
                    }
                }
                failedPackages.push({ packageName, taskLogs: packageLogs, task });
            }
            const logGroup = [];
            let packagesMessage = `##vso[task.logissue type=error]Your build failed on the following packages => `;
            failedPackages.forEach(({ packageName, task, taskLogs }) => {
                packagesMessage += `[${packageName} ${task}], `;
                if (taskLogs) {
                    logGroup.push(taskLogs);
                }
            });
            packagesMessage += "find the error logs above with the prefix 'ERR!'";
            console.log(packagesMessage);
            console.log(`##vso[task.logissue type=warning]${logGroup.join(" | ")}`);
        }
    }
}
exports.AdoReporter = AdoReporter;
//# sourceMappingURL=AdoReporter.js.map