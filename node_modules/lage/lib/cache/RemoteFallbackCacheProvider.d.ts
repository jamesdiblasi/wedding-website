import { ICacheStorage } from "backfill-config";
import { Logger } from "backfill-logger";
import { CacheOptions } from "../types/CacheOptions";
export declare type RemoteFallbackCacheProviderOptions = Pick<CacheOptions, "internalCacheFolder" | "cacheStorageConfig" | "writeRemoteCache" | "skipLocalCache" | "incrementalCaching">;
/**
 * Remote Fallback Cache Provider
 *
 * This backfill cache provider will fallback to a remote cache provider if the local cache does not contain the item.
 * It will also automatically populate the local cache with the remote cache.
 */
export declare class RemoteFallbackCacheProvider implements ICacheStorage {
    private cacheOptions;
    private localCacheStorageProvider;
    private remoteCacheStorageProvider?;
    private static localHits;
    private static remoteHits;
    constructor(cacheOptions: RemoteFallbackCacheProviderOptions, logger: Logger, cwd: string);
    fetch(hash: string): Promise<boolean>;
    put(hash: string, filesToCache: string[]): Promise<void>;
    private isRemoteHit;
    private isLocalHit;
}
