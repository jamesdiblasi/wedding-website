"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.salt = void 0;
const path = __importStar(require("path"));
const crypto = __importStar(require("crypto"));
const fg = __importStar(require("fast-glob"));
const fs = __importStar(require("fs"));
let envHash;
function salt(environmentGlobFiles, command, repoRoot, customKey = "") {
    return hashStrings([...getEnvHash(environmentGlobFiles, repoRoot), command, customKey]);
}
exports.salt = salt;
function getEnvHash(environmentGlobFiles, repoRoot) {
    if (!envHash) {
        const newline = /\r\n|\r|\n/g;
        const LF = "\n";
        const files = fg.sync(environmentGlobFiles, {
            cwd: repoRoot,
        });
        files.sort((a, b) => a.localeCompare(b));
        const hashes = files.map((file) => {
            const hasher = crypto.createHash("sha1");
            hasher.update(file);
            const fileBuffer = fs.readFileSync(path.join(repoRoot, file));
            const data = fileBuffer.toString().replace(newline, LF);
            hasher.update(data);
            return hasher.digest("hex");
        });
        envHash = hashes;
    }
    return envHash;
}
function hashStrings(strings) {
    const hasher = crypto.createHash("sha1");
    const anArray = typeof strings === "string" ? [strings] : strings;
    const elements = [...anArray];
    elements.sort((a, b) => a.localeCompare(b));
    elements.forEach((element) => hasher.update(element));
    return hasher.digest("hex");
}
//# sourceMappingURL=salt.js.map