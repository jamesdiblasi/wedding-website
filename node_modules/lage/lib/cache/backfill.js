"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cachePut = exports.cacheFetch = exports.cacheHash = void 0;
const cacheConfig_1 = require("./cacheConfig");
const logger_1 = require("../logger");
const salt_1 = require("./salt");
const backfill = __importStar(require("backfill/lib/api"));
async function cacheHash(id, cwd, root, cacheOptions, args) {
    const cacheConfig = (0, cacheConfig_1.getCacheConfig)(cwd, cacheOptions);
    const backfillLogger = backfill.makeLogger("error", process.stdout, process.stderr);
    const hashKey = (0, salt_1.salt)(cacheOptions.environmentGlob || ["lage.config.js"], `${id}|${JSON.stringify(args)}`, root, cacheOptions.cacheKey);
    backfillLogger.setName(id);
    try {
        return await backfill.computeHash(cwd, backfillLogger, hashKey, cacheConfig);
    }
    catch (_a) {
        // computeHash can throw exception when git is not installed or the repo hashes cannot be calculated with a staged file that is deleted
        // lage will continue as if this package cannot be cached
    }
    return null;
}
exports.cacheHash = cacheHash;
async function cacheFetch(hash, id, cwd, cacheOptions) {
    if (!hash) {
        return false;
    }
    const cacheConfig = (0, cacheConfig_1.getCacheConfig)(cwd, cacheOptions);
    const backfillLogger = backfill.makeLogger("error", process.stdout, process.stderr);
    try {
        return await backfill.fetch(cwd, hash, backfillLogger, cacheConfig);
    }
    catch (e) {
        logger_1.logger.error(`${id} fetchBackfill ${(e && e.stack) || (e && e.message) || e}`);
    }
    return false;
}
exports.cacheFetch = cacheFetch;
async function cachePut(hash, cwd, cacheOptions) {
    if (!hash) {
        return;
    }
    const cacheConfig = (0, cacheConfig_1.getCacheConfig)(cwd, cacheOptions);
    const backfillLogger = backfill.makeLogger("warn", process.stdout, process.stderr);
    try {
        await backfill.put(cwd, hash, backfillLogger, cacheConfig);
    }
    catch (e) {
        // sometimes outputGlob don't match any files, so skipping this
    }
}
exports.cachePut = cachePut;
//# sourceMappingURL=backfill.js.map