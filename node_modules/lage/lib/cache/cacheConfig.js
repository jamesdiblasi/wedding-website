"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCacheConfig = void 0;
const backfill_config_1 = require("backfill-config");
const backfill_logger_1 = require("backfill-logger");
const isRunningFromCI_1 = require("../isRunningFromCI");
const RemoteFallbackCacheProvider_1 = require("./RemoteFallbackCacheProvider");
function getCacheConfig(cwd, cacheOptions) {
    var _a;
    const defaultCacheConfig = (0, backfill_config_1.createDefaultConfig)(cwd);
    // in lage, default mode is to CACHE locally
    defaultCacheConfig.cacheStorageConfig.provider = "local";
    const logger = (0, backfill_logger_1.makeLogger)("warn");
    const envConfig = (0, backfill_config_1.getEnvConfig)(logger);
    const configWithEnvOverrides = Object.assign(Object.assign(Object.assign(Object.assign({}, defaultCacheConfig), cacheOptions), envConfig), { writeRemoteCache: cacheOptions.writeRemoteCache || !!process.env.LAGE_WRITE_REMOTE_CACHE || isRunningFromCI_1.isRunningFromCI, skipLocalCache: (_a = cacheOptions.skipLocalCache) !== null && _a !== void 0 ? _a : isRunningFromCI_1.isRunningFromCI });
    const configWithFallback = Object.assign(Object.assign({}, configWithEnvOverrides), { cacheStorageConfig: Object.assign(Object.assign({}, configWithEnvOverrides.cacheStorageConfig), { provider: (logger, cwd) => new RemoteFallbackCacheProvider_1.RemoteFallbackCacheProvider(configWithEnvOverrides, logger, cwd), name: "remote-fallback-provider" }) });
    return configWithFallback;
}
exports.getCacheConfig = getCacheConfig;
//# sourceMappingURL=cacheConfig.js.map