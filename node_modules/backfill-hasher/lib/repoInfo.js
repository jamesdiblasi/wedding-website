"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRepoInfo = exports.getRepoInfoNoCache = void 0;
const workspace_tools_1 = require("workspace-tools");
const package_deps_hash_1 = require("@rushstack/package-deps-hash");
const createPackageHashes_1 = require("./createPackageHashes");
const repoInfoCache = [];
/**
 * repoInfo cache lookup - it is specialized to be using a substring match to make it run as fast as possible
 * @param packageRoot
 */
function searchRepoInfoCache(packageRoot) {
    for (const repoInfo of repoInfoCache) {
        if (repoInfo.workspaceInfo && packageRoot.startsWith(repoInfo.root)) {
            return repoInfo;
        }
    }
}
async function getRepoInfoNoCache(cwd) {
    const root = workspace_tools_1.getWorkspaceRoot(cwd);
    if (!root) {
        throw new Error("Cannot initialize Repo class without a workspace root");
    }
    // Assuming the package-deps-hash package returns a map of files to hashes that are unordered
    const unorderedRepoHashes = Object.fromEntries(package_deps_hash_1.getPackageDeps(root));
    // Sorting repoHash by key because we want to consistent hashing based on the order of the files
    const repoHashes = Object.keys(unorderedRepoHashes)
        .sort((a, b) => a.localeCompare(b))
        .reduce((obj, key) => {
        obj[key] = unorderedRepoHashes[key];
        return obj;
    }, {});
    const workspaceInfo = workspace_tools_1.getWorkspaces(root);
    const parsedLock = await workspace_tools_1.parseLockFile(root);
    const packageHashes = createPackageHashes_1.createPackageHashes(root, workspaceInfo, repoHashes);
    const repoInfo = {
        root,
        workspaceInfo,
        parsedLock,
        repoHashes,
        packageHashes,
    };
    repoInfoCache.push(repoInfo);
    return repoInfo;
}
exports.getRepoInfoNoCache = getRepoInfoNoCache;
// A promise to guarantee the getRepoInfo is done one at a time
let oneAtATime = Promise.resolve();
/**
 * Retrieves the repoInfo, one at a time
 *
 * No parallel of this function is allowed; this maximizes the cache hit even
 * though the getWorkspaces and parseLockFile are async functions from workspace-tools
 *
 * @param cwd
 */
async function getRepoInfo(cwd) {
    oneAtATime = oneAtATime.then(async () => {
        const searchResult = searchRepoInfoCache(cwd);
        if (searchResult) {
            return searchResult;
        }
        return getRepoInfoNoCache(cwd);
    });
    return oneAtATime;
}
exports.getRepoInfo = getRepoInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb0luZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmVwb0luZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscURBTXlCO0FBRXpCLG9FQUE4RDtBQUM5RCwrREFBNEQ7QUFVNUQsTUFBTSxhQUFhLEdBQWUsRUFBRSxDQUFDO0FBRXJDOzs7R0FHRztBQUNILFNBQVMsbUJBQW1CLENBQUMsV0FBbUI7SUFDOUMsS0FBSyxNQUFNLFFBQVEsSUFBSSxhQUFhLEVBQUU7UUFDcEMsSUFBSSxRQUFRLENBQUMsYUFBYSxJQUFJLFdBQVcsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ25FLE9BQU8sUUFBUSxDQUFDO1NBQ2pCO0tBQ0Y7QUFDSCxDQUFDO0FBRU0sS0FBSyxVQUFVLGtCQUFrQixDQUFDLEdBQVc7SUFDbEQsTUFBTSxJQUFJLEdBQUcsa0NBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFbkMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQztLQUMxRTtJQUVELDZGQUE2RjtJQUM3RixNQUFNLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsa0NBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXJFLGdHQUFnRztJQUNoRyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDO1NBQ2hELElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ25CLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsRUFBRSxFQUE0QixDQUFDLENBQUM7SUFFbkMsTUFBTSxhQUFhLEdBQUcsK0JBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQyxNQUFNLFVBQVUsR0FBRyxNQUFNLCtCQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0MsTUFBTSxhQUFhLEdBQUcseUNBQW1CLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUUzRSxNQUFNLFFBQVEsR0FBRztRQUNmLElBQUk7UUFDSixhQUFhO1FBQ2IsVUFBVTtRQUNWLFVBQVU7UUFDVixhQUFhO0tBQ2QsQ0FBQztJQUVGLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFN0IsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQWpDRCxnREFpQ0M7QUFFRCwrREFBK0Q7QUFDL0QsSUFBSSxVQUFVLEdBQWlCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUVqRDs7Ozs7OztHQU9HO0FBQ0ksS0FBSyxVQUFVLFdBQVcsQ0FBQyxHQUFXO0lBQzNDLFVBQVUsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3RDLE1BQU0sWUFBWSxHQUFHLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLElBQUksWUFBWSxFQUFFO1lBQ2hCLE9BQU8sWUFBWSxDQUFDO1NBQ3JCO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQyxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFWRCxrQ0FVQyJ9