import { Logger } from "backfill-logger";
import { WorkspaceInfo } from "workspace-tools";
import { PackageHashInfo } from "./hashOfPackage";
export interface IHasher {
    createPackageHash: (salt: string) => Promise<string>;
    hashOfOutput: () => Promise<string>;
}
export declare function addToQueue(dependencyNames: string[], queue: string[], done: PackageHashInfo[], workspaces: WorkspaceInfo): void;
export declare class Hasher implements IHasher {
    private options;
    private logger;
    private packageRoot;
    private repoInfo?;
    constructor(options: {
        packageRoot: string;
    }, logger: Logger);
    createPackageHash(salt: string): Promise<string>;
    /**
     * Hash of output will hash the output files. This is meant to be used by validation and will not cache the repo hashes.
     * The validateOutput option should be used sparingly for performance reasons. It is meant to help be a debugging tool
     * to help investigate integrity of the cache.
     */
    hashOfOutput(): Promise<string>;
}
export * from "./repoInfo";
//# sourceMappingURL=index.d.ts.map