"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateHashOfFiles = void 0;
const path_1 = __importStar(require("path"));
const helpers_1 = require("./helpers");
/**
 * Generates a hash string based on files in a package
 *
 * This implementation relies on `git hash-object` to quickly calculate all files
 * in the repo, caching this result so repeated calls to this function will be
 * a simple lookup.
 *
 * Note: We have to force the types because globby types are wrong
 *
 * @param packageRoot The root of the package
 * @param repoInfo The repoInfo that carries information about repo-wide hashes
 */
async function generateHashOfFiles(packageRoot, repoInfo) {
    const { repoHashes, root, packageHashes } = repoInfo;
    const hashes = [];
    const packageRelativeRoot = path_1.default
        .relative(root, packageRoot)
        .replace(/\\/g, "/");
    if (packageHashes[packageRelativeRoot]) {
        // Fast path: if files are clearly inside a package as per the packageHashes cache
        for (const hash of packageHashes[packageRelativeRoot]) {
            hashes.push(hash[0], hash[1]);
        }
        return helpers_1.hashStrings(hashes);
    }
    else {
        // Slow old path: if files are not clearly inside a package (mostly the case for malformed monorepos, like tests)
        const normalized = path_1.default.normalize(packageRoot) + path_1.sep;
        const files = Object.keys(repoHashes).filter((f) => path_1.default.join(root, f).includes(normalized));
        files.sort((a, b) => a.localeCompare(b));
        const hashes = [];
        for (const file of files) {
            hashes.push(file, repoHashes[file]);
        }
        return helpers_1.hashStrings(hashes);
    }
}
exports.generateHashOfFiles = generateHashOfFiles;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaE9mRmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaGFzaE9mRmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZDQUFpQztBQUNqQyx1Q0FBd0M7QUFHeEM7Ozs7Ozs7Ozs7O0dBV0c7QUFDSSxLQUFLLFVBQVUsbUJBQW1CLENBQ3ZDLFdBQW1CLEVBQ25CLFFBQWtCO0lBRWxCLE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxHQUFHLFFBQVEsQ0FBQztJQUVyRCxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7SUFDNUIsTUFBTSxtQkFBbUIsR0FBRyxjQUFJO1NBQzdCLFFBQVEsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDO1NBQzNCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFdkIsSUFBSSxhQUFhLENBQUMsbUJBQW1CLENBQUMsRUFBRTtRQUN0QyxrRkFBa0Y7UUFDbEYsS0FBSyxNQUFNLElBQUksSUFBSSxhQUFhLENBQUMsbUJBQW1CLENBQUMsRUFBRTtZQUNyRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMvQjtRQUNELE9BQU8scUJBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUM1QjtTQUFNO1FBQ0wsaUhBQWlIO1FBQ2pILE1BQU0sVUFBVSxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUcsVUFBRyxDQUFDO1FBRXJELE1BQU0sS0FBSyxHQUFhLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDM0QsY0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUN4QyxDQUFDO1FBRUYsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV6QyxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7UUFFNUIsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDckM7UUFFRCxPQUFPLHFCQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDNUI7QUFDSCxDQUFDO0FBbkNELGtEQW1DQyJ9