"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hasher = exports.addToQueue = void 0;
const workspace_tools_1 = require("workspace-tools");
const hashOfFiles_1 = require("./hashOfFiles");
const hashOfPackage_1 = require("./hashOfPackage");
const helpers_1 = require("./helpers");
const repoInfo_1 = require("./repoInfo");
function isDone(done, packageName) {
    return Boolean(done.find(({ name }) => name === packageName));
}
function isInQueue(queue, packagePath) {
    return queue.indexOf(packagePath) >= 0;
}
function addToQueue(dependencyNames, queue, done, workspaces) {
    dependencyNames.forEach((name) => {
        const dependencyPath = workspace_tools_1.findWorkspacePath(workspaces, name);
        if (dependencyPath) {
            if (!isDone(done, name) && !isInQueue(queue, dependencyPath)) {
                queue.push(dependencyPath);
            }
        }
    });
}
exports.addToQueue = addToQueue;
class Hasher {
    constructor(options, logger) {
        this.options = options;
        this.logger = logger;
        this.packageRoot = this.options.packageRoot;
    }
    async createPackageHash(salt) {
        const tracer = this.logger.setTime("hashTime");
        const packageRoot = await helpers_1.getPackageRoot(this.packageRoot);
        this.repoInfo = await repoInfo_1.getRepoInfo(packageRoot);
        const { workspaceInfo } = this.repoInfo;
        const queue = [packageRoot];
        const done = [];
        while (queue.length > 0) {
            const packageRoot = queue.shift();
            if (!packageRoot) {
                continue;
            }
            const packageHash = await hashOfPackage_1.getPackageHash(packageRoot, this.repoInfo, this.logger);
            addToQueue(packageHash.internalDependencies, queue, done, workspaceInfo);
            done.push(packageHash);
        }
        const internalPackagesHash = hashOfPackage_1.generateHashOfInternalPackages(done);
        const buildCommandHash = helpers_1.hashStrings(salt);
        const combinedHash = helpers_1.hashStrings([internalPackagesHash, buildCommandHash]);
        this.logger.verbose(`Hash of internal packages: ${internalPackagesHash}`);
        this.logger.verbose(`Hash of build command: ${buildCommandHash}`);
        this.logger.verbose(`Combined hash: ${combinedHash}`);
        tracer.stop();
        this.logger.setHash(combinedHash);
        return combinedHash;
    }
    /**
     * Hash of output will hash the output files. This is meant to be used by validation and will not cache the repo hashes.
     * The validateOutput option should be used sparingly for performance reasons. It is meant to help be a debugging tool
     * to help investigate integrity of the cache.
     */
    async hashOfOutput() {
        const repoInfo = await repoInfo_1.getRepoInfoNoCache(this.packageRoot);
        return hashOfFiles_1.generateHashOfFiles(this.packageRoot, repoInfo);
    }
}
exports.Hasher = Hasher;
__exportStar(require("./repoInfo"), exports);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLHFEQUFtRTtBQUNuRSwrQ0FBb0Q7QUFDcEQsbURBSXlCO0FBQ3pCLHVDQUF3RDtBQUN4RCx5Q0FBdUU7QUFPdkUsU0FBUyxNQUFNLENBQUMsSUFBdUIsRUFBRSxXQUFtQjtJQUMxRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDaEUsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLEtBQWUsRUFBRSxXQUFtQjtJQUNyRCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFRCxTQUFnQixVQUFVLENBQ3hCLGVBQXlCLEVBQ3pCLEtBQWUsRUFDZixJQUF1QixFQUN2QixVQUF5QjtJQUV6QixlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDL0IsTUFBTSxjQUFjLEdBQUcsbUNBQWlCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTNELElBQUksY0FBYyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsRUFBRTtnQkFDNUQsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQzthQUM1QjtTQUNGO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBZkQsZ0NBZUM7QUFFRCxNQUFhLE1BQU07SUFJakIsWUFDVSxPQUVQLEVBQ08sTUFBYztRQUhkLFlBQU8sR0FBUCxPQUFPLENBRWQ7UUFDTyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRXRCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7SUFDOUMsQ0FBQztJQUVNLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFZO1FBQ3pDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRS9DLE1BQU0sV0FBVyxHQUFHLE1BQU0sd0JBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFM0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLHNCQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFL0MsTUFBTSxFQUFFLGFBQWEsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFeEMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM1QixNQUFNLElBQUksR0FBc0IsRUFBRSxDQUFDO1FBRW5DLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkIsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBRWxDLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ2hCLFNBQVM7YUFDVjtZQUVELE1BQU0sV0FBVyxHQUFHLE1BQU0sOEJBQWMsQ0FDdEMsV0FBVyxFQUNYLElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FDWixDQUFDO1lBRUYsVUFBVSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBRXpFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDeEI7UUFFRCxNQUFNLG9CQUFvQixHQUFHLDhDQUE4QixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sZ0JBQWdCLEdBQUcscUJBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxNQUFNLFlBQVksR0FBRyxxQkFBVyxDQUFDLENBQUMsb0JBQW9CLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBRTNFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLDhCQUE4QixvQkFBb0IsRUFBRSxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsMEJBQTBCLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUV0RCxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVsQyxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLEtBQUssQ0FBQyxZQUFZO1FBQ3ZCLE1BQU0sUUFBUSxHQUFHLE1BQU0sNkJBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRTVELE9BQU8saUNBQW1CLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN6RCxDQUFDO0NBQ0Y7QUFuRUQsd0JBbUVDO0FBRUQsNkNBQTJCIn0=