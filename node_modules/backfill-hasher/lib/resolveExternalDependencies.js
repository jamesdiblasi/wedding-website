"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveExternalDependencies = exports.addToQueue = exports.filterExternalDependencies = void 0;
const workspace_tools_1 = require("workspace-tools");
const helpers_1 = require("./helpers");
function filterExternalDependencies(dependencies, workspaces) {
    const workspacePackageNames = workspace_tools_1.listOfWorkspacePackageNames(workspaces);
    const externalDependencies = {};
    Object.entries(dependencies).forEach(([name, versionRange]) => {
        if (workspacePackageNames.indexOf(name) < 0) {
            externalDependencies[name] = versionRange;
        }
    });
    return externalDependencies;
}
exports.filterExternalDependencies = filterExternalDependencies;
function isDone(done, key) {
    return done.indexOf(key) >= 0;
}
function isInQueue(queue, key) {
    return Boolean(queue.find(([name, versionRange]) => helpers_1.nameAtVersion(name, versionRange) === key));
}
function addToQueue(dependencies, done, queue) {
    if (dependencies) {
        Object.entries(dependencies).forEach(([name, versionRange]) => {
            const versionRangeSignature = helpers_1.nameAtVersion(name, versionRange);
            if (!isDone(done, versionRangeSignature) &&
                !isInQueue(queue, versionRangeSignature)) {
                queue.push([name, versionRange]);
            }
        });
    }
}
exports.addToQueue = addToQueue;
function resolveExternalDependencies(allDependencies, workspaces, lockInfo) {
    const externalDependencies = filterExternalDependencies(allDependencies, workspaces);
    const done = [];
    const doneRange = [];
    const queue = Object.entries(externalDependencies);
    while (queue.length > 0) {
        const next = queue.shift();
        if (!next) {
            continue;
        }
        const [name, versionRange] = next;
        doneRange.push(helpers_1.nameAtVersion(name, versionRange));
        const lockFileResult = workspace_tools_1.queryLockFile(name, versionRange, lockInfo);
        if (lockFileResult) {
            const { version, dependencies } = lockFileResult;
            addToQueue(dependencies, doneRange, queue);
            done.push(helpers_1.nameAtVersion(name, version));
        }
        else {
            done.push(helpers_1.nameAtVersion(name, versionRange));
        }
    }
    return done;
}
exports.resolveExternalDependencies = resolveExternalDependencies;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZUV4dGVybmFsRGVwZW5kZW5jaWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3Jlc29sdmVFeHRlcm5hbERlcGVuZGVuY2llcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxREFBNkU7QUFDN0UsdUNBQTBDO0FBUzFDLFNBQWdCLDBCQUEwQixDQUN4QyxZQUEwQixFQUMxQixVQUF5QjtJQUV6QixNQUFNLHFCQUFxQixHQUFHLDZDQUEyQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3RFLE1BQU0sb0JBQW9CLEdBQWlCLEVBQUUsQ0FBQztJQUU5QyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxFQUFFLEVBQUU7UUFDNUQsSUFBSSxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzNDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQztTQUMzQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxvQkFBb0IsQ0FBQztBQUM5QixDQUFDO0FBZEQsZ0VBY0M7QUFFRCxTQUFTLE1BQU0sQ0FBQyxJQUFjLEVBQUUsR0FBVztJQUN6QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxLQUF5QixFQUFFLEdBQVc7SUFDdkQsT0FBTyxPQUFPLENBQ1osS0FBSyxDQUFDLElBQUksQ0FDUixDQUFDLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQyx1QkFBYSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsS0FBSyxHQUFHLENBQ3BFLENBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFnQixVQUFVLENBQ3hCLFlBQXNDLEVBQ3RDLElBQWMsRUFDZCxLQUF5QjtJQUV6QixJQUFJLFlBQVksRUFBRTtRQUNoQixNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxFQUFFLEVBQUU7WUFDNUQsTUFBTSxxQkFBcUIsR0FBRyx1QkFBYSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztZQUVoRSxJQUNFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxxQkFBcUIsQ0FBQztnQkFDcEMsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLHFCQUFxQixDQUFDLEVBQ3hDO2dCQUNBLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQzthQUNsQztRQUNILENBQUMsQ0FBQyxDQUFDO0tBQ0o7QUFDSCxDQUFDO0FBakJELGdDQWlCQztBQUVELFNBQWdCLDJCQUEyQixDQUN6QyxlQUE2QixFQUM3QixVQUF5QixFQUN6QixRQUFvQjtJQUVwQixNQUFNLG9CQUFvQixHQUFHLDBCQUEwQixDQUNyRCxlQUFlLEVBQ2YsVUFBVSxDQUNYLENBQUM7SUFFRixNQUFNLElBQUksR0FBRyxFQUFFLENBQUM7SUFDaEIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUVuRCxPQUFPLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3ZCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUUzQixJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsU0FBUztTQUNWO1FBRUQsTUFBTSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDbEMsU0FBUyxDQUFDLElBQUksQ0FBQyx1QkFBYSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBRWxELE1BQU0sY0FBYyxHQUFHLCtCQUFhLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUVuRSxJQUFJLGNBQWMsRUFBRTtZQUNsQixNQUFNLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxHQUFHLGNBQWMsQ0FBQztZQUVqRCxVQUFVLENBQUMsWUFBWSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLHVCQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDekM7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQWEsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztTQUM5QztLQUNGO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBckNELGtFQXFDQyJ9