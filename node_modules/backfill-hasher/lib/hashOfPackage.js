"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageHash = exports.generateHashOfInternalPackages = void 0;
const crypto_1 = __importDefault(require("crypto"));
const path_1 = __importDefault(require("path"));
const resolveInternalDependencies_1 = require("./resolveInternalDependencies");
const resolveExternalDependencies_1 = require("./resolveExternalDependencies");
const hashOfFiles_1 = require("./hashOfFiles");
const helpers_1 = require("./helpers");
function generateHashOfInternalPackages(internalPackages) {
    internalPackages.sort((a, b) => a.name.localeCompare(b.name));
    const hasher = crypto_1.default.createHash("sha1");
    internalPackages.forEach((pkg) => {
        hasher.update(pkg.name);
        hasher.update(pkg.filesHash);
        hasher.update(pkg.dependenciesHash);
    });
    return hasher.digest("hex");
}
exports.generateHashOfInternalPackages = generateHashOfInternalPackages;
const memoization = {};
async function getPackageHash(packageRoot, repoInfo, logger) {
    const { workspaceInfo, parsedLock } = repoInfo;
    const memoizationKey = path_1.default.resolve(packageRoot);
    if (memoization[memoizationKey]) {
        return memoization[memoizationKey];
    }
    const { name, dependencies, devDependencies } = require(path_1.default.join(packageRoot, "package.json"));
    const allDependencies = {
        ...dependencies,
        ...devDependencies,
    };
    const internalDependencies = resolveInternalDependencies_1.resolveInternalDependencies(allDependencies, workspaceInfo);
    const externalDeoendencies = resolveExternalDependencies_1.resolveExternalDependencies(allDependencies, workspaceInfo, parsedLock);
    const resolvedDependencies = [
        ...internalDependencies,
        ...externalDeoendencies,
    ];
    const filesHash = await hashOfFiles_1.generateHashOfFiles(packageRoot, repoInfo);
    const dependenciesHash = helpers_1.hashStrings(resolvedDependencies);
    logger.silly(name);
    logger.silly(`  ${filesHash} (fileHash)`);
    logger.silly(`  ${dependenciesHash} (dependenciesHash)`);
    const packageHash = {
        name,
        filesHash,
        dependenciesHash,
        internalDependencies,
    };
    memoization[memoizationKey] = packageHash;
    return packageHash;
}
exports.getPackageHash = getPackageHash;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaE9mUGFja2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYXNoT2ZQYWNrYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG9EQUE0QjtBQUM1QixnREFBd0I7QUFFeEIsK0VBQTRFO0FBQzVFLCtFQUd1QztBQUN2QywrQ0FBb0Q7QUFDcEQsdUNBQXdDO0FBVXhDLFNBQWdCLDhCQUE4QixDQUM1QyxnQkFBbUM7SUFFbkMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFOUQsTUFBTSxNQUFNLEdBQUcsZ0JBQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDL0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM5QixDQUFDO0FBYkQsd0VBYUM7QUFFRCxNQUFNLFdBQVcsR0FBdUMsRUFBRSxDQUFDO0FBRXBELEtBQUssVUFBVSxjQUFjLENBQ2xDLFdBQW1CLEVBQ25CLFFBQWtCLEVBQ2xCLE1BQWM7SUFFZCxNQUFNLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxHQUFHLFFBQVEsQ0FBQztJQUUvQyxNQUFNLGNBQWMsR0FBRyxjQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRWpELElBQUksV0FBVyxDQUFDLGNBQWMsQ0FBQyxFQUFFO1FBQy9CLE9BQU8sV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQ3BDO0lBRUQsTUFBTSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLEdBQUcsT0FBTyxDQUFDLGNBQUksQ0FBQyxJQUFJLENBQy9ELFdBQVcsRUFDWCxjQUFjLENBQ2YsQ0FBQyxDQUFDO0lBRUgsTUFBTSxlQUFlLEdBQWlCO1FBQ3BDLEdBQUcsWUFBWTtRQUNmLEdBQUcsZUFBZTtLQUNuQixDQUFDO0lBRUYsTUFBTSxvQkFBb0IsR0FBRyx5REFBMkIsQ0FDdEQsZUFBZSxFQUNmLGFBQWEsQ0FDZCxDQUFDO0lBRUYsTUFBTSxvQkFBb0IsR0FBRyx5REFBMkIsQ0FDdEQsZUFBZSxFQUNmLGFBQWEsRUFDYixVQUFVLENBQ1gsQ0FBQztJQUVGLE1BQU0sb0JBQW9CLEdBQUc7UUFDM0IsR0FBRyxvQkFBb0I7UUFDdkIsR0FBRyxvQkFBb0I7S0FDeEIsQ0FBQztJQUVGLE1BQU0sU0FBUyxHQUFHLE1BQU0saUNBQW1CLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ25FLE1BQU0sZ0JBQWdCLEdBQUcscUJBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBRTNELE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkIsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLFNBQVMsYUFBYSxDQUFDLENBQUM7SUFDMUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLGdCQUFnQixxQkFBcUIsQ0FBQyxDQUFDO0lBRXpELE1BQU0sV0FBVyxHQUFHO1FBQ2xCLElBQUk7UUFDSixTQUFTO1FBQ1QsZ0JBQWdCO1FBQ2hCLG9CQUFvQjtLQUNyQixDQUFDO0lBRUYsV0FBVyxDQUFDLGNBQWMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztJQUUxQyxPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDO0FBeERELHdDQXdEQyJ9